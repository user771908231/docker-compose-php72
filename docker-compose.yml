version: '3'
services:
    nginx:
        image: nginx:1.12.2
        # 端口映射
        ports:
            - 80:80
            - 443:443
        # 依赖关系 先跑php
        depends_on:
            - "php"
        # 数据卷
        volumes:
            # 映射主机./conf.d目录到容器/etc/nginx/conf.d目录
            - "$PWD/conf.d:/etc/nginx/conf.d"
            - "$PWD/html:/usr/share/nginx/html"
        networks:
            - app_net
        # 容器名称
        container_name: docker-compose-nginx
    php:
        build: ./php-mysqli
        image: php:7.2-fpm-mysqli
        ports:
            - 9000:9000
        volumes:
            - $PWD/html:/var/www/html
        networks:
            - app_net
        container_name: docker-compose-php
    mysql-server:
        hostname: mysql-server
        container_name: mysql-server
        image: mysql:5.7
        volumes:
            - $PWD/Docker/mysql57/conf.d/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf
            - $PWD/Docker/mysql57/all/data:/var/lib/mysql
        command: --character-set-server=utf8
        ports:
            - 3306:3306
        environment:
            MYSQL_ROOT_PASSWORD: 123456
            MYSQL_DATABASE: myphp
            MYSQL_USER: php
            MYSQL_PASSWORD: php-mysql
        networks:
            app_net:
                # 固定子网ip，网段必须在子网络10.10.*.*
                ipv4_address: 10.10.10.1
            container_name: docker-compose-mysql
    redis-server:
        hostname: redis-server
        container_name: redis-server
        image: redis
        ports:
            - 6379:6379

    redis-session:
        hostname: redis-session
        container_name: redis-session
        image: redis

    mongo-server:
        hostname: mongo-server
        container_name: mongo-server
        image: mongo
        ports:
            - 27072:27017
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: 123456

    zookeeper-server:
        hostname: zookeeper-server
        container_name: zookeeper-server72
        image: wurstmeister/zookeeper
        ports:
            - 2181:2181
        restart: unless-stopped

    # kafka version: 1.1.0
    # scala version: 2.12
    kafka-server:
        hostname: kafka-server
        container_name: kafka-server72
        image: wurstmeister/kafka
        ports:
            - 9092:9092
        environment:
            KAFKA_ADVERTISED_HOST_NAME: kafka-server
            KAFKA_ZOOKEEPER_CONNECT: "zookeeper-server:2181"
            KAFKA_BROKER_ID: 1
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_CREATE_TOPICS: "stream-in:1:1,stream-out:1:1"
        depends_on:
            - zookeeper-server
networks:
    # 配置docker network
    app_net:
        driver: bridge
        ipam:
            config:
                # 子网络
                - subnet: 10.10.0.0/16
